 const char manifest_json[] PROGMEM = R"rawliteral(
{
  "index.css": {
    "file": "someshit/index-css.css",
    "src": "index.css"
  },
  "index.html": {
    "css": [
      "someshit/index-css.css"
    ],
    "file": "someshit/index-js.js",
    "isEntry": true,
    "src": "index.html"
  }
}
)rawliteral";

 const char btr2refrshlvlJs[] PROGMEM = R"rawliteral(
let batteryIsCharging = false;
function refreshLevel(elemNumber, level, value) {
    document.querySelector("#batteryCell"+elemNumber+" > div > div.acid-container > div > div").style.height = (level * document.querySelector("#batteryCell"+elemNumber+" > div").clientHeight) + "px";
    document.querySelector("#batteryCell"+elemNumber+" > div > div.acid-container > div > div").style.setProperty("--acid-height", (level * document.querySelector("#batteryCell0 > div").clientHeight) + "px");
    document.querySelector("#batteryCell"+elemNumber+" > div > div.percentage > span").innerText = value.toFixed(3);
}
  )rawliteral";

//  const char onNetMessage[] PROGMEM = R"rawliteral(
// const onNetMessage=e=>{const t=e.data;if("SCN"===t.slice(0,3)){let e=t.slice(3);document.getElementById("scanStations").innerText="",console.log(JSON.parse(e));let n=JSON.parse(e);for(let e=0;e<n.length;e++){let t=document.createElement("div");t.setAttribute("label",n[e].ssid);let l=document.createElement("span");n[e].hidden?l.innerText="*(hidden)*":l.innerText=n[e].ssid,l.classList.add("ssid"),t.appendChild(l);let a=document.createElement("div");a.classList.add("params");let s=document.createElement("span");s.innerText=n[e].rssi+"dBm",a.appendChild(s);let d=document.createElement("span");d.innerText="ch:"+n[e].channel,a.appendChild(d);let c=document.createElement("span"),r="";switch(n[e].secure){case 2:r="TKIP";break;case 4:r="CCMP";break;case 5:r="WEP";break;case 7:r="NONE";break;case 8:r="AUTO";break;default:r="NO INFO"}c.innerText=r,a.appendChild(c),document.getElementById("scanStations").appendChild(t);let i=document.createElement("span");i.innerText=n[e].bssid,a.appendChild(i),t.appendChild(a),t.onclick=(e=>{let t=e.target.parentElement.parentElement.getAttribute("label");t&&null!=t||(t=e.target.parentElement.getAttribute("label")),t&&null!=t||(t=e.target.getAttribute("label")),document.querySelector("#ssidInput").value=t,document.querySelector("#ssidPassword").focus(),console.log(t)})}}else console.log(t)};
//   )rawliteral";

 const char onBTRMessage[] PROGMEM = R"rawliteral(
const onBTRMessage=e=>{const t=e.data;if("BAT"===t.slice(0,3)){const e=t.slice(3),r=JSON.parse(e);if(batteryObj=r[0],console.log(batteryObj),batteryObj.cellsVoltage){let e=0;batteryObj.cellsVoltage.forEach((t,r)=>{let a=t-3;refreshLevel(r,a/1.15,t),e+=t});let t=document.querySelectorAll(".cell");batteryObj.cellsBalance.forEach((e,r)=>{e?t[r].querySelector(".battery").classList.add("balancing"):t[r].querySelector(".battery").classList.remove("balancing")}),console.log(e.toFixed(3));const r=document.btrSt;r.cellSum.value.innerHTML=e.toFixed(3)+" v",r.balanceCap.value.innerHTML=batteryObj.BalanceCapacity+" ah",r.rateCap.value.innerHTML=batteryObj.RateCapacity+" ah",r.divVoltage.value.innerHTML=batteryObj.voltage+" v",r.divCurrent.value.innerHTML=batteryObj.current+" a",batteryObj.current<0?(r.divInputPower.value.innerHTML="0 w",r.divOutputPower.value.innerHTML=(batteryObj.voltage*Math.abs(batteryObj.current)).toFixed(2)+" w"):batteryObj.current>0?(r.divInputPower.value.innerHTML=(batteryObj.voltage*batteryObj.current).toFixed(2)+" w",r.divOutputPower.value.innerHTML="0 w"):(r.divInputPower.value.innerHTML="0 w",r.divOutputPower.value.innerHTML="0 w"),r.divVoltDiff.value.innerHTML=(Math.max.apply(null,batteryObj.cellsVoltage)-Math.min.apply(null,batteryObj.cellsVoltage)).toFixed(3)+" v",document.querySelector("#chrgMosfetValue").checked=batteryObj.chargeMosfet,document.querySelector("#dsChrgMosfetValue").checked=batteryObj.dischargeMosfet,r.stateChrg.value.innerHTML=batteryObj.stateOfCharge+" %",document.querySelector("body > div.content > div > div.ntcsStats").childNodes.forEach((e,t)=>{e.innerHTML=batteryObj.ntcs[t]+"&#176;C"})}let a=new Date(parseInt(batteryObj.currentTime+"000")),c=a.getHours();c<10&&(c="0"+c);let l=a.getMinutes();l<10&&(l="0"+l);let n=a.getSeconds();n<10&&(n="0"+n);const o=document.btrSt;o.currentTime.value.innerHTML=`${c}:${l}:${n}`,batteryObj.current>0?(document.querySelector("h1").innerHTML="CHARGING!!!",document.querySelectorAll(".acid-container > .acid").forEach(e=>{e.style.filter="hue-rotate(222deg)",document.querySelector("h1").classList.add("charging"),document.querySelector("h1").classList.remove("discharging")})):batteryObj.current<0?(document.querySelector("h1").innerHTML="DISCHARGING!!!",document.querySelectorAll(".acid-container > .acid").forEach(e=>{e.style.filter="hue-rotate(0deg)",document.querySelector("h1").classList.remove("charging"),document.querySelector("h1").classList.add("discharging")})):(document.querySelector("h1").classList.remove("discharging"),document.querySelector("h1").classList.remove("charging"),document.querySelector("h1").innerHTML="..idle",document.querySelectorAll(".acid-container > .acid").forEach(e=>{e.style.filter="hue-rotate(120deg)"}))}else console.log(t)};
)rawliteral";
//  const char onIPMessage[] PROGMEM = R"rawliteral(
// const onIPMessage=e=>{const s=e.data;if(console.log("IP Messages================================================"),"IP"===s.slice(0,2)){let e=s.split("--:")[1];console.log(e.split("-:"));let o=e.split("-:");for(const e of o){console.log(e.split(":-"));let s=e.split(":-")[0],o=e.split(":-")[1];switch(s){case"softap":document.querySelector("#softIP").innerHTML=o;break;case"local":document.querySelector("#pubIP").innerHTML=o;break;case"ssid":document.querySelector("#netName").innerHTML=o}}}else if("BAT"===s.slice(0,3)){console.log("BAT");let e=s.split('current":')[1],o=e.split(",")[0],l=JSON.parse(o);console.log(l),l>.2?document.querySelector("h1").classList.add("charging"):l<0?document.querySelector("h1").classList.add("discharging"):0==l&&(document.querySelector("h1").classList.remove("charging"),document.querySelector("h1").classList.remove("discharging"))}else console.log(s)};
//   )rawliteral";

   const char initBatteryArray[] PROGMEM = R"rawliteral(
function initBatteryArray(e){const t=document.btrSt=document.querySelector("body > div.content > div > div.batteryStats");t.innerHTML="",document.querySelector("#batteryArray").innerHTML="",document.querySelector(".ntcsStats").innerHTML="";let a='\n    <div class="battery">\n    <div class="acid-container">\n      <div class="acid">\n        <div class="level" class="fill"></div>\n        <svg class="waves"\n             xmlns="http://www.w3.org/2000/svg"\n             xmlns:xlink="http://www.w3.org/1999/xlink"\n             viewBox="0 24 150 28"\n             preserveAspectRatio="none">\n          <defs>\n            <path id="gentle-wave"\n                  d="M-160 44c30 0 \n                     58-18 88-18s\n                     58 18 88 18 \n                     58-18 88-18 \n                     58 18 88 18\n                     v44h-352z" />\n          </defs>\n          <g class="parallax">\n            <use xlink:href="#gentle-wave" x="50" y="0" fill="#000"/>\n            <use xlink:href="#gentle-wave" x="50" y="3" fill="#fff"/>\n            <use xlink:href="#gentle-wave" x="50" y="6" fill="#0ff"/>  \n          </g>\n        </svg>\n      </div>\n    </div>\n  <div class="percentage"><span class="percentagexxx">0</span> v</div>\n  </div>\n  ',n=document.createElement("div");n.setAttribute("aria-label","half1");let l=document.createElement("div");l.setAttribute("aria-label","half2");for(let t=0;t<e;t++){let e=document.createElement("div");e.setAttribute("id",`batteryCell${t}`),e.classList.add("cell"),e.innerHTML=a,document.querySelector("#batteryArray").appendChild(e)}t.cellSum=document.createElement("div"),t.cellSum.classList.add("cellSum"),t.appendChild(t.cellSum),t.cellSum.name=document.createElement("span"),t.cellSum.name.classList.add("cellSumName"),t.cellSum.name.innerHTML="cellSum:",t.cellSum.appendChild(t.cellSum.name),t.cellSum.value=document.createElement("span"),t.cellSum.value.classList.add("cellSumValue"),t.cellSum.appendChild(t.cellSum.value),t.divVoltage=document.createElement("div"),t.divVoltage.classList.add("voltage"),t.appendChild(t.divVoltage),t.divVoltage.name=document.createElement("span"),t.divVoltage.name.classList.add("voltageName"),t.divVoltage.name.innerHTML="Voltage:",t.divVoltage.appendChild(t.divVoltage.name),t.divVoltage.value=document.createElement("span"),t.divVoltage.value.classList.add("voltageValue"),t.divVoltage.appendChild(t.divVoltage.value),t.divVoltDiff=document.createElement("div"),t.divVoltDiff.classList.add("voltageDiff"),t.appendChild(t.divVoltDiff),t.divVoltDiff.name=document.createElement("span"),t.divVoltDiff.name.classList.add("divVoltDiffName"),t.divVoltDiff.name.innerHTML="Voltage diff:",t.divVoltDiff.appendChild(t.divVoltDiff.name),t.divVoltDiff.value=document.createElement("span"),t.divVoltDiff.value.classList.add("divVoltDiffValue"),t.divVoltDiff.appendChild(t.divVoltDiff.value),t.divCurrent=document.createElement("div"),t.divCurrent.classList.add("current"),t.appendChild(t.divCurrent),t.divCurrent.name=document.createElement("span"),t.divCurrent.name.classList.add("currentName"),t.divCurrent.name.innerHTML="Current:",t.divCurrent.appendChild(t.divCurrent.name),t.divCurrent.value=document.createElement("span"),t.divCurrent.value.classList.add("currentValue"),t.divCurrent.appendChild(t.divCurrent.value),t.divInputPower=document.createElement("div"),t.divInputPower.classList.add("InputPower"),t.appendChild(t.divInputPower),t.divInputPower.name=document.createElement("span"),t.divInputPower.name.classList.add("InputPowerName"),t.divInputPower.name.innerHTML="InputPower:",t.divInputPower.appendChild(t.divInputPower.name),t.divInputPower.value=document.createElement("span"),t.divInputPower.value.classList.add("InputPowerValue"),t.divInputPower.appendChild(t.divInputPower.value),t.divOutputPower=document.createElement("div"),t.divOutputPower.classList.add("OutputPower"),t.appendChild(t.divOutputPower),t.divOutputPower.name=document.createElement("span"),t.divOutputPower.name.classList.add("OutputPowerName"),t.divOutputPower.name.innerHTML="OutputPower:",t.divOutputPower.appendChild(t.divOutputPower.name),t.divOutputPower.value=document.createElement("span"),t.divOutputPower.value.classList.add("OutputPowerValue"),t.divOutputPower.appendChild(t.divOutputPower.value),t.balanceCap=document.createElement("div"),t.balanceCap.classList.add("balanceCap"),t.appendChild(t.balanceCap),t.balanceCap.name=document.createElement("span"),t.balanceCap.name.classList.add("balanceCapName"),t.balanceCap.name.innerHTML="BalanceCapacity:",t.balanceCap.appendChild(t.balanceCap.name),t.balanceCap.value=document.createElement("span"),t.balanceCap.value.classList.add("balanceCapValue"),t.balanceCap.appendChild(t.balanceCap.value),t.rateCap=document.createElement("div"),t.rateCap.classList.add("rateCap"),t.appendChild(t.rateCap),t.rateCap.name=document.createElement("span"),t.rateCap.name.classList.add("rateCapName"),t.rateCap.name.innerHTML="RateCapacity:",t.rateCap.appendChild(t.rateCap.name),t.rateCap.value=document.createElement("span"),t.rateCap.value.classList.add("rateCapValue"),t.rateCap.appendChild(t.rateCap.value),t.chrgMosfet=document.createElement("div"),t.chrgMosfet.classList.add("chrgMosfet"),t.appendChild(t.chrgMosfet),t.chrgMosfet.name=document.createElement("span"),t.chrgMosfet.name.classList.add("chrgMosfetName"),t.chrgMosfet.name.innerHTML="Charging mosfet:",t.chrgMosfet.appendChild(t.chrgMosfet.name),t.chrgMosfet.value=document.createElement("input"),t.chrgMosfet.value.setAttribute("type","checkbox"),t.chrgMosfet.value.setAttribute("id","chrgMosfetValue"),t.chrgMosfet.value.classList.add("chrgMosfetValue"),t.chrgMosfet.appendChild(t.chrgMosfet.value),t.chrgMosfet.label=document.createElement("label"),t.chrgMosfet.label.setAttribute("for","chrgMosfetValue"),t.chrgMosfet.appendChild(t.chrgMosfet.label),t.dsChrgMosfet=document.createElement("div"),t.dsChrgMosfet.classList.add("dsChrgMosfet"),t.appendChild(t.dsChrgMosfet),t.dsChrgMosfet.name=document.createElement("span"),t.dsChrgMosfet.name.classList.add("dsChrgMosfetName"),t.dsChrgMosfet.name.innerHTML="Discharging mosfet:",t.dsChrgMosfet.appendChild(t.dsChrgMosfet.name),t.dsChrgMosfet.value=document.createElement("input"),t.dsChrgMosfet.value.setAttribute("type","checkbox"),t.dsChrgMosfet.value.setAttribute("id","dsChrgMosfetValue"),t.dsChrgMosfet.value.classList.add("dsChrgMosfetValue"),t.dsChrgMosfet.appendChild(t.dsChrgMosfet.value),t.dsChrgMosfet.label=document.createElement("label"),t.dsChrgMosfet.label.setAttribute("for","dsChrgMosfetValue"),t.dsChrgMosfet.appendChild(t.dsChrgMosfet.label),t.chrgMosfet.value&&clearEventListener(t.chrgMosfet.value),t.dsChrgMosfet.value&&clearEventListener(t.dsChrgMosfet.value),t.stateChrg=document.createElement("div"),t.stateChrg.classList.add("stateChrg"),t.appendChild(t.stateChrg),t.stateChrg.name=document.createElement("span"),t.stateChrg.name.classList.add("stateChrgName"),t.stateChrg.name.innerHTML="StateOfCharge:",t.stateChrg.appendChild(t.stateChrg.name),t.stateChrg.value=document.createElement("span"),t.stateChrg.value.classList.add("stateChrgValue"),t.stateChrg.appendChild(t.stateChrg.value),t.currentTime=document.createElement("div"),t.currentTime.classList.add("currentTime"),t.appendChild(t.currentTime),t.currentTime.name=document.createElement("span"),t.currentTime.name.classList.add("currentTimeName"),t.currentTime.name.innerHTML="CurrentTime:",t.currentTime.appendChild(t.currentTime.name),t.currentTime.value=document.createElement("span"),t.currentTime.value.classList.add("currentTimeValue"),t.currentTime.appendChild(t.currentTime.value);for(let e=0;e<3;e++){let t=document.createElement("span");t.setAttribute("id",`ntc${e}`),t.innerHTML="tmp",document.querySelector(".ntcsStats").appendChild(t)}return t}function clearEventListener(e){const t=e.cloneNode(!0);return e.replaceWith(t),t}
  )rawliteral";